#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <algorithm> 
#include <memory> 
#include <chrono>
#include <thread>

using namespace std;


const string RESET = "\033[0m";
const string RED = "\033[31m";
const string GREEN = "\033[32m";
const string YELLOW = "\033[33m";
const string BLUE = "\033[34m";
const string CYAN = "\033[36m";


struct TempatParkir {
    string nama;
    string lokasi;
    bool tersedia;
};


class Pengguna {
private:
    string namaPengguna;
    string kataSandi;

public:
    
    Pengguna(const string& nama, const string& sandi) : namaPengguna(nama), kataSandi(sandi) {}

   
    string getNamaPengguna() const {
        return namaPengguna;
    }

   
    string getKataSandi() const {
        return kataSandi;
    }
};


void tampilkanDenganAnimasi(const string& teks, int kecepatan = 50) {
    for (char c : teks) {
        cout << c << flush;
        this_thread::sleep_for(chrono::milliseconds(kecepatan));
    }
    cout << endl;
}


void tampilkanMenuUtama() {
    tampilkanDenganAnimasi(CYAN + "===== Menu Utama =====" + RESET);
    tampilkanDenganAnimasi("1. Registrasi");
    tampilkanDenganAnimasi("2. Login");
    tampilkanDenganAnimasi("3. Keluar");
    tampilkanDenganAnimasi("Masukkan pilihan Anda: ");
}


void registrasiPengguna(vector<shared_ptr<Pengguna>>& pengguna) {
    string nama, sandi;

    tampilkanDenganAnimasi(CYAN + "===== Registrasi Pengguna =====" + RESET);
    cout << "Masukkan nama pengguna: ";
    cin >> nama;
    cout << "Masukkan kata sandi: ";
    cin >> sandi;

    
    if (nama.empty() || sandi.empty()) {
        tampilkanDenganAnimasi(RED + "Nama pengguna atau kata sandi tidak boleh kosong." + RESET);
        return;
    }

   
    shared_ptr<Pengguna> penggunaBaru = make_shared<Pengguna>(nama, sandi);
    pengguna.push_back(penggunaBaru);

    tampilkanDenganAnimasi(GREEN + "Registrasi berhasil!" + RESET);
}


shared_ptr<Pengguna> loginPengguna(vector<shared_ptr<Pengguna>>& pengguna) {
    string nama, sandi;

    tampilkanDenganAnimasi(CYAN + "===== Login Pengguna =====" + RESET);
    cout << "Masukkan nama pengguna: ";
    cin >> nama;
    cout << "Masukkan kata sandi: ";
    cin >> sandi;

  
    if (nama.empty() || sandi.empty()) {
        tampilkanDenganAnimasi(RED + "Nama pengguna atau kata sandi tidak boleh kosong." + RESET);
        return nullptr;
    }

   
    for (auto& p : pengguna) {
        if (p->getNamaPengguna() == nama && p->getKataSandi() == sandi) {
            return p;
        }
    }

    tampilkanDenganAnimasi(RED + "Nama pengguna atau kata sandi salah." + RESET);
    return nullptr;
}


bool cariTempatParkirHelper(const vector<TempatParkir>& tempatParkir, const string& lokasi, int left, int right) {
    if (left > right) return false;

    int mid = left + (right - left) / 2;
    string lokasiParkir = tempatParkir[mid].lokasi;
    transform(lokasiParkir.begin(), lokasiParkir.end(), lokasiParkir.begin(), ::tolower);

    if (lokasiParkir.find(lokasi) != string::npos && tempatParkir[mid].tersedia) {
        tampilkanDenganAnimasi(GREEN + "Tempat parkir ditemukan: " + RESET + tempatParkir[mid].nama + " di " + tempatParkir[mid].lokasi);
        return true;
    }

    return cariTempatParkirHelper(tempatParkir, lokasi, left, mid - 1) ||
           cariTempatParkirHelper(tempatParkir, lokasi, mid + 1, right);
}

void cariTempatParkir(const vector<TempatParkir>& tempatParkir) {
    string lokasi;

    tampilkanDenganAnimasi(CYAN + "===== Pencarian Tempat Parkir =====" + RESET);
    cout << "Masukkan lokasi yang diinginkan: ";
    cin.ignore(); // Mengabaikan karakter newline yang tersisa
    getline(cin, lokasi); // Menggunakan getline untuk menangkap input dengan spasi

   
    if (lokasi.empty()) {
        tampilkanDenganAnimasi(RED + "Lokasi tidak boleh kosong." + RESET);
        return;
    }

   
    transform(lokasi.begin(), lokasi.end(), lokasi.begin(), ::tolower);

    if (!cariTempatParkirHelper(tempatParkir, lokasi, 0, tempatParkir.size() - 1)) {
        tampilkanDenganAnimasi(RED + "Tidak ditemukan tempat parkir di lokasi tersebut." + RESET);
    }
}

// Fungsi untuk memesan tempat parkir menggunakan stack
void pesanTempatParkir(vector<TempatParkir>& tempatParkir) {
    string namaTempat;

    tampilkanDenganAnimasi(CYAN + "===== Pemesanan Tempat Parkir =====" + RESET);
    cout << "Masukkan nama tempat parkir yang ingin dipesan: ";
    cin.ignore(); // Mengabaikan karakter newline yang tersisa
    getline(cin, namaTempat); // Menggunakan getline untuk menangkap input dengan spasi

   
    if (namaTempat.empty()) {
        tampilkanDenganAnimasi(RED + "Nama tempat parkir tidak boleh kosong." + RESET);
        return;
    }

    stack<TempatParkir*> stackParkir;
    for (auto& tp : tempatParkir) {
        if (tp.nama == namaTempat && tp.tersedia) {
            stackParkir.push(&tp);
        }
    }

    if (!stackParkir.empty()) {
        TempatParkir* tp = stackParkir.top();
        tp->tersedia = false;
        tampilkanDenganAnimasi(GREEN + "Pemesanan berhasil!" + RESET);
        tampilkanDenganAnimasi("Anda akan menerima struk dan barcode di email.");
    } else {
        tampilkanDenganAnimasi(RED + "Tempat parkir tidak tersedia atau nama salah." + RESET);
    }
}

int main() {

    vector<shared_ptr<Pengguna>> pengguna;

    
    vector<TempatParkir> tempatParkir = {
        {"Parkir A", "Jl. Sudirman", true},
        {"Parkir B", "Jl. Thamrin", true},
        {"Parkir C", "Jl. Gatot Subroto", true},
    };


    tampilkanDenganAnimasi(BLUE + "Selamat Datang di Sistem Manajemen Parkir!" + RESET, 100);

   
    bool selesai = false;
    while (!selesai) {
        tampilkanMenuUtama();

        int pilihan;
        cin >> pilihan;

        
        if (cin.fail() || pilihan < 1 || pilihan > 3) {
            cin.clear(); // Clear the error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignore the rest of the input
            tampilkanDenganAnimasi(RED + "Pilihan tidak valid." + RESET);
            continue;
        }

        switch (pilihan) {
            case 1:
                registrasiPengguna(pengguna);
                break;
            case 2: {
                shared_ptr<Pengguna> penggunaLogin = loginPengguna(pengguna);
                if (penggunaLogin != nullptr) {
                    // Jika login berhasil, tampilkan menu pengguna
                    bool logout = false;
                    while (!logout) {
                        tampilkanDenganAnimasi(CYAN + "===== Menu Pengguna =====" + RESET);
                        tampilkanDenganAnimasi("1. Cari Tempat Parkir");
                        tampilkanDenganAnimasi("2. Pesan Tempat Parkir");
                        tampilkanDenganAnimasi("3. Logout");
                        tampilkanDenganAnimasi("Masukkan pilihan Anda: ");

                        int pilihanPengguna;
                        cin >> pilihanPengguna;

                       
                        if (cin.fail() || pilihanPengguna < 1 || pilihanPengguna > 3) {
                            cin.clear(); // Clear the error flag
                            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignore the rest of the input
                            tampilkanDenganAnimasi(RED + "Pilihan tidak valid." + RESET);
                            continue;
                        }

                        switch (pilihanPengguna) {
                            case 1:
                                cariTempatParkir(tempatParkir);
                                break;
                            case 2:
                                pesanTempatParkir(tempatParkir);
                                break;
                            case 3:
                                tampilkanDenganAnimasi(GREEN + "Logout berhasil." + RESET);
                                logout = true;
                                break;
                            default:
                                tampilkanDenganAnimasi(RED + "Pilihan tidak valid." + RESET);
                        }
                    }
                }
                break;
            }
            case 3:
                tampilkanDenganAnimasi(GREEN + "Terima kasih!" + RESET);
                selesai = true;
                break;
            default:
                tampilkanDenganAnimasi(RED + "Pilihan tidak valid." + RESET);
        }
    }

    return 0;
}
